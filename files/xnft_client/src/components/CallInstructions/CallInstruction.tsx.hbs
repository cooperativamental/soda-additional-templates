import {
  usePublicKey,
  useConnection,
  useNavigation,
  View,
  Image,
  Text,
  Button,
  Tab,
  List,
  ListItem,
} from "react-xnft";
import { PublicKey, Transaction } from "@solana/web3.js";
import { BN } from "@project-serum/anchor";
import * as anchor from "@project-serum/anchor";
import {
  getProgramSource,
} from "../../../utils/index";


{{#each instructions}}
//for {{name}} instructions
{{#each args}}
const [{{name}}_for_{{../name}} , set{{name}}_for_{{../name}}] = useState()
{{/each}}
{{/each}}

//handler functions for inputs feilds
{{#each instructions}}
{{#each args}}
const {{name}}handler_for_{{../name}} = (e:any) => {
  set{{name}}_for_{{../name}}(e.target.value)
}
{{/each}}
{{/each}}

const ProgramSource_Address = new PublicKey(
  ""
);

//get All the PDA
{{#each instructions}}
{{#each accounts}}
{{#if isMut}}
{{#unless isSigner}}
export function {{name}}PDA_for_{{../name}}() {
  const [{{name}}PDA_for{{../name}}] = PublicKey.findProgramAddressSync(
    [Buffer.from("") , {/*rest add according to you*/}],
    ProgramSource_Address
  )
  return {{name}}PDA_for_{{../name}}
}
{{/unless}}
{{/if}}
{{/each}}
{{/each}}


{{#each instructions}}
export async function Call_{{name}}_Instruction {
  const client = getProgramSource();

  const Call_{{name}}_Instruction_tx = client.methods
  client.methods
    .{{name}}({{#each args}}{{name}}_for_{{../name}}{{/each}})
    .accounts({
      {{#each accounts}}
      {{#if isMut}}
      {{#unless isSigner}}
      {{name}} : {{name}}PDA_for_{{../name}},
      {{/unless}}
      {{/if}}
      {{/each}}
    })
    .instruction()

    return Call_{{name}}_Instruction_tx

}

{{/each}}


